apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Values.name }}
data:
  relay: |
    extensions:
      health_check:
        endpoint: ${env:MY_POD_IP}:13133

    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:4317
          http:
            endpoint: ${env:MY_POD_IP}:4318

      filelog:
        include:
          - /var/log/pods/{{ .Release.Namespace }}_*/grpcclient/*.log
          - /var/log/pods/{{ .Release.Namespace }}_*/grpcserver/*.log
          - /var/log/pods/{{ .Release.Namespace }}_*/httpclient/*.log
          - /var/log/pods/{{ .Release.Namespace }}_*/httpserver/*.log
        exclude:
          # Exclude logs from all containers named otel-collector
          - /var/log/pods/*/otel-collector/*.log
        start_at: beginning
        include_file_path: true
        include_file_name: false
        operators:
          # Find out which format is used by kubernetes
          - type: router
            id: get-format
            routes:
              - output: parser-docker
                expr: 'body matches "^\\{"'
              - output: parser-crio
                expr: 'body matches "^[^ Z]+ "'
              - output: parser-containerd
                expr: 'body matches "^[^ Z]+Z"'
          # Parse CRI-O format
          - type: regex_parser
            id: parser-crio
            regex:
              '^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*)
              ?(?P<log>.*)$'
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.time
              layout_type: gotime
              layout: '2006-01-02T15:04:05.999999999Z07:00'
          # Parse CRI-Containerd format
          - type: regex_parser
            id: parser-containerd
            regex:
              '^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*)
              ?(?P<log>.*)$'
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.time
              layout: '%Y-%m-%dT%H:%M:%S.%LZ'
          # Parse Docker format
          - type: json_parser
            id: parser-docker
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.time
              layout: '%Y-%m-%dT%H:%M:%S.%LZ'
          - type: move
            from: attributes.log
            to: body
          # Extract metadata from file path
          - type: regex_parser
            id: extract_metadata_from_filepath
            regex: '^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]{36})\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$'
            parse_from: attributes["log.file.path"]
            cache:
              size: 128 # default maximum amount of Pods per Node is 110
          # Rename attributes
          - type: move
            from: attributes.stream
            to: attributes["log.iostream"]
          - type: move
            from: attributes.container_name
            to: resource["k8s.container.name"]
          - type: move
            from: attributes.namespace
            to: resource["k8s.namespace.name"]
          - type: move
            from: attributes.pod_name
            to: resource["k8s.pod.name"]
          - type: move
            from: attributes.restart_count
            to: resource["k8s.container.restart_count"]
          - type: move
            from: attributes.uid
            to: resource["k8s.pod.uid"]
          - type: json_parser
            parse_from: attributes.log
          - type: move
            from: attributes["service.name"]
            to: resource["service.name"]
          - type: remove
            field: attributes.log

    processors:
      batch: {}
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 25

    exporters:
      debug: {}
      # debug:
      #   verbosity: detailed

      otlp/trace:
        endpoint: {{ .Values.otel.endpoints.traces }}
        tls:
          insecure: true

      prometheusremotewrite:
        endpoint: "http://prometheus-server.default.svc.cluster.local:80/api/v1/write"

      otlphttp/logs:
        endpoint: http://loki-gateway.default.svc.cluster.local:80/otlp

    service:
      extensions:
      - health_check

      pipelines:
        metrics:
          receivers:
            - otlp
          processors:
            - memory_limiter
            - batch
          exporters:
            # - debug
            - prometheusremotewrite
        traces:
          receivers:
            - otlp
          processors:
            - memory_limiter
            - batch
          exporters:
            # - debug
            - otlp/trace
        logs:
          receivers:
            - filelog
          processors:
            - memory_limiter
            - batch
          exporters:
            # - debug
            - otlphttp/logs

      telemetry:
        metrics:
          address: ${env:MY_POD_IP}:8888
